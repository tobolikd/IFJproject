#ifndef IFJ_PRECED_ANALYZER_H
#define IFJ_PRECED_ANALYZER_H

#include "lex-analyzer.h"
#include "syn-analyzer.h"
#include "error-codes.h"
#include "symtable.h"

const char preced_table[15][15] = 
{
//   '*', '/','+', '-', '.', '<', '>','>=','<=','==','!=', '(', ')', 'i', '$'
    {'>', '>','>', '>', '>', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // *   #1
    {'>', '>','>', '>', '>', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // /   #1
    {'<', '<','>', '>', '>', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // +   #2
    {'<', '<','>', '>', '>', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // -   #2
    {'<', '<','>', '>', '>', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // .   #2 
    {'<', '<','<', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // >   #3
    {'<', '<','<', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // <   #3
    {'<', '<','<', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // >=  #3
    {'<', '<','<', '<', '<', '>', '>', '>', '>', '>', '>', '<', '>', '<', '>'}, // <=  #3
    {'<', '<','<', '<', '<', '<', '<', '<', '<', '>', '>', '<', '>', '<', '>'}, // === #4
    {'<', '<','<', '<', '<', '<', '<', '<', '<', '>', '>', '<', '>', '<', '>'}, // !== #4 
    {'<', '<','<', '<', '<', '<', '<', '<', '<', '<', '<', '<', '=', '<', ' '}, // (
    {'>', '>','>', '>', '>', '>', '>', '>', '>', '>', '>', ' ', '>', ' ', '>'}, // )
    {'>', '>','>', '>', '>', '>', '>', '>', '>', '>', '>', ' ', '>', ' ', '>'}, // i
    {'<', '<','<', '<', '<', '<', '<', '<', '<', '<', '<', '<', ' ', '<', 'x'}  // $
};


#endif // IFJ_SYN_ANALYZER_H